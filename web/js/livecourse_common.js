/**
 * Common javascript functions to be used in the LiveCourse HTML5 UI.
 */

/**
 * Shows or generates a horizontal pop-up dialog above the current page.
 * header - Title text shown at the top of the dialog
 * message - Content of the dialog
 * showCloseButton (optional) - true/false to show a button allowing the dialog to be closed
 * doNotOpen (optional) - true/false to specify whether to prevent opening the dialog after generation
 *
 * return - JQuery object containing the dialog
 */
function dialog_new(header,message,showCloseButton,doNotOpen)
{
	var dialog = $('<div class="DialogOverlay"><div class="DialogContainer"><h1 style="visibility:hidden;">'+header+'</h1><div class="DialogMessage"></div><div class="buttons"></div></div></div>');
	dialog.find(".DialogMessage").append(message);
	if (showCloseButton == true || typeof showCloseButton == "undefined")
	{
		dialog.find(".DialogContainer .buttons").append('<button class="DialogButton">Close</button>');
		dialog.find(".DialogButton").first().click(function() {
			dialog_close(dialog);
		});
	}
	dialog.appendTo("body");
	if (typeof doNotOpen == "undefined" || doNotOpen == false)
	{
		dialog_show(dialog);
	}
	Cufon.refresh();
	return dialog;
}


/**
 * Shows or generates a horizontal pop-up dialog above the current page with the content of the specified selector
 * header - Title text shown at the top of the dialog
 * targetSelector - Selector pointing to a specific element defined on the current page to show in the dialog
 * showCloseButton (optional) - true/false to show a button allowing the dialog to be closed
 * doNotOpen (optional) - true/false to specify whether to prevent opening the dialog after generation
 *
 * return - JQuery object containing the dialog
 */
function dialog_clone(header,targetSelector,showCloseButton,doNotOpen)
{
	var dialog = dialog_new(header,'<div style="text-align:center;">Loading . . .</div>',showCloseButton,true);
	dialog.find(".DialogMessage").html($(targetSelector).html());
	if (typeof doNotOpen == "undefined" || doNotOpen == false)
	{
		dialog_show(dialog);
	}
	return dialog;
}


/**
 * Shows a dialog that is hidden after being generated by dialog_new
 * dialog - dialog object as returned by dialog_new
 */
function dialog_show(dialog)
{
	dialog.fadeIn(200,function() {
		// WOOOO HEADER ANIMATION!
		dialog.find("h1").css("opacity","0.0");
		dialog.find("h1").css("visibility","visible");
		dialog.find("h1").css("padding-left","1000px");
		dialog.find("h1").animate({"padding-left":0,"opacity":1.0},350, "easeOutQuart", null);
		dialog.find(".DialogContainer").fadeIn(250,function() {
			dialog.find(".DialogButton").first().focus();
		});
	});
}

/**
 * Closes (and DESTROYS) a dialog previously created by dialog_new
 * dialog - dialog object as returned by dialog_new
 */
function dialog_close(dialog)
{
	// WOOO HEADER ANIMATION!
	dialog.find("h1").animate({"padding-left":'1000px',"opacity":0.0},200, "easeInQuint", null);
	dialog.fadeOut(300,function() {
		dialog.remove();
	});
}

/**
 * Adds a button to the button section of the passed dialog
 * dialog - dialog object as returned by dialog_new
 * buttonTitle - Button text of the button to be added
 * buttonCallback - Function to run when new button is selected
 * prepend - true/false, determines whether to place the button before or after existing buttons
 */
function dialog_addbutton(dialog,buttonTitle,buttonCallback,prepend)
{
	var button = $('<button class="DialogButton">'+buttonTitle+'</button>');
	if (prepend == true)
		dialog.find(".DialogContainer .buttons").prepend(button);
	else
		dialog.find(".DialogContainer .buttons").append(button);
	button.click(buttonCallback);
}
